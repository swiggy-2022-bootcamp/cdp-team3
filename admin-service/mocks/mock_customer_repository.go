// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/swiggy-2022-bootcamp/cdp-team3/admin-service/domain/repository (interfaces: CustomerRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	errors "github.com/swiggy-2022-bootcamp/cdp-team3/admin-service/errors"
	models "github.com/swiggy-2022-bootcamp/cdp-team3/admin-service/models"
)

// MockCustomerRepository is a mock of CustomerRepository interface.
type MockCustomerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerRepositoryMockRecorder
}

// MockCustomerRepositoryMockRecorder is the mock recorder for MockCustomerRepository.
type MockCustomerRepositoryMockRecorder struct {
	mock *MockCustomerRepository
}

// NewMockCustomerRepository creates a new mock instance.
func NewMockCustomerRepository(ctrl *gomock.Controller) *MockCustomerRepository {
	mock := &MockCustomerRepository{ctrl: ctrl}
	mock.recorder = &MockCustomerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerRepository) EXPECT() *MockCustomerRepositoryMockRecorder {
	return m.recorder
}

// AddCustomerToDB mocks base method.
func (m *MockCustomerRepository) AddCustomerToDB(arg0 *models.Customer) *errors.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCustomerToDB", arg0)
	ret0, _ := ret[0].(*errors.AppError)
	return ret0
}

// AddCustomerToDB indicates an expected call of AddCustomerToDB.
func (mr *MockCustomerRepositoryMockRecorder) AddCustomerToDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCustomerToDB", reflect.TypeOf((*MockCustomerRepository)(nil).AddCustomerToDB), arg0)
}

// DeleteCustomerByIdFromDB mocks base method.
func (m *MockCustomerRepository) DeleteCustomerByIdFromDB(arg0 string) (bool, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomerByIdFromDB", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// DeleteCustomerByIdFromDB indicates an expected call of DeleteCustomerByIdFromDB.
func (mr *MockCustomerRepositoryMockRecorder) DeleteCustomerByIdFromDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomerByIdFromDB", reflect.TypeOf((*MockCustomerRepository)(nil).DeleteCustomerByIdFromDB), arg0)
}

// GetAllCustomersFromDB mocks base method.
func (m *MockCustomerRepository) GetAllCustomersFromDB() ([]models.Customer, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCustomersFromDB")
	ret0, _ := ret[0].([]models.Customer)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GetAllCustomersFromDB indicates an expected call of GetAllCustomersFromDB.
func (mr *MockCustomerRepositoryMockRecorder) GetAllCustomersFromDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCustomersFromDB", reflect.TypeOf((*MockCustomerRepository)(nil).GetAllCustomersFromDB))
}

// GetCustomerByEmailFromDB mocks base method.
func (m *MockCustomerRepository) GetCustomerByEmailFromDB(arg0 string) (*models.Customer, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByEmailFromDB", arg0)
	ret0, _ := ret[0].(*models.Customer)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GetCustomerByEmailFromDB indicates an expected call of GetCustomerByEmailFromDB.
func (mr *MockCustomerRepositoryMockRecorder) GetCustomerByEmailFromDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByEmailFromDB", reflect.TypeOf((*MockCustomerRepository)(nil).GetCustomerByEmailFromDB), arg0)
}

// GetCustomerByIdFromDB mocks base method.
func (m *MockCustomerRepository) GetCustomerByIdFromDB(arg0 string) (*models.Customer, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByIdFromDB", arg0)
	ret0, _ := ret[0].(*models.Customer)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GetCustomerByIdFromDB indicates an expected call of GetCustomerByIdFromDB.
func (mr *MockCustomerRepositoryMockRecorder) GetCustomerByIdFromDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByIdFromDB", reflect.TypeOf((*MockCustomerRepository)(nil).GetCustomerByIdFromDB), arg0)
}

// UpdateCustomerByIdFromDB mocks base method.
func (m *MockCustomerRepository) UpdateCustomerByIdFromDB(arg0 string, arg1 *models.Customer) (*models.Customer, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomerByIdFromDB", arg0, arg1)
	ret0, _ := ret[0].(*models.Customer)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// UpdateCustomerByIdFromDB indicates an expected call of UpdateCustomerByIdFromDB.
func (mr *MockCustomerRepositoryMockRecorder) UpdateCustomerByIdFromDB(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomerByIdFromDB", reflect.TypeOf((*MockCustomerRepository)(nil).UpdateCustomerByIdFromDB), arg0, arg1)
}
