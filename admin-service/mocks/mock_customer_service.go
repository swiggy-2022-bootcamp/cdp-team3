// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/swiggy-2022-bootcamp/cdp-team3/admin-service/domain/services (interfaces: CustomerService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	errors "github.com/swiggy-2022-bootcamp/cdp-team3/admin-service/errors"
	models "github.com/swiggy-2022-bootcamp/cdp-team3/admin-service/models"
)

// MockCustomerService is a mock of CustomerService interface.
type MockCustomerService struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerServiceMockRecorder
}

// MockCustomerServiceMockRecorder is the mock recorder for MockCustomerService.
type MockCustomerServiceMockRecorder struct {
	mock *MockCustomerService
}

// NewMockCustomerService creates a new mock instance.
func NewMockCustomerService(ctrl *gomock.Controller) *MockCustomerService {
	mock := &MockCustomerService{ctrl: ctrl}
	mock.recorder = &MockCustomerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerService) EXPECT() *MockCustomerServiceMockRecorder {
	return m.recorder
}

// AddCustomer mocks base method.
func (m *MockCustomerService) AddCustomer(arg0 *models.Customer) *errors.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCustomer", arg0)
	ret0, _ := ret[0].(*errors.AppError)
	return ret0
}

// AddCustomer indicates an expected call of AddCustomer.
func (mr *MockCustomerServiceMockRecorder) AddCustomer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCustomer", reflect.TypeOf((*MockCustomerService)(nil).AddCustomer), arg0)
}

// DeleteCustomerById mocks base method.
func (m *MockCustomerService) DeleteCustomerById(arg0 string) (bool, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomerById", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// DeleteCustomerById indicates an expected call of DeleteCustomerById.
func (mr *MockCustomerServiceMockRecorder) DeleteCustomerById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomerById", reflect.TypeOf((*MockCustomerService)(nil).DeleteCustomerById), arg0)
}

// GetAllCustomers mocks base method.
func (m *MockCustomerService) GetAllCustomers() ([]models.Customer, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCustomers")
	ret0, _ := ret[0].([]models.Customer)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GetAllCustomers indicates an expected call of GetAllCustomers.
func (mr *MockCustomerServiceMockRecorder) GetAllCustomers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCustomers", reflect.TypeOf((*MockCustomerService)(nil).GetAllCustomers))
}

// GetCustomerByEmail mocks base method.
func (m *MockCustomerService) GetCustomerByEmail(arg0 string) (*models.Customer, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByEmail", arg0)
	ret0, _ := ret[0].(*models.Customer)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GetCustomerByEmail indicates an expected call of GetCustomerByEmail.
func (mr *MockCustomerServiceMockRecorder) GetCustomerByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByEmail", reflect.TypeOf((*MockCustomerService)(nil).GetCustomerByEmail), arg0)
}

// GetCustomerById mocks base method.
func (m *MockCustomerService) GetCustomerById(arg0 string) (*models.Customer, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerById", arg0)
	ret0, _ := ret[0].(*models.Customer)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GetCustomerById indicates an expected call of GetCustomerById.
func (mr *MockCustomerServiceMockRecorder) GetCustomerById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerById", reflect.TypeOf((*MockCustomerService)(nil).GetCustomerById), arg0)
}

// UpdateCustomerById mocks base method.
func (m *MockCustomerService) UpdateCustomerById(arg0 string, arg1 *models.Customer) (*models.Customer, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomerById", arg0, arg1)
	ret0, _ := ret[0].(*models.Customer)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// UpdateCustomerById indicates an expected call of UpdateCustomerById.
func (mr *MockCustomerServiceMockRecorder) UpdateCustomerById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomerById", reflect.TypeOf((*MockCustomerService)(nil).UpdateCustomerById), arg0, arg1)
}
