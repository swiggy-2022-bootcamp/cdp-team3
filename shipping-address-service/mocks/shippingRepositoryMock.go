// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cdp-team3/shipping-address-service/domain/repository (interfaces: ShippingRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	app_erros "github.com/cdp-team3/shipping-address-service/app-errors"
	models "github.com/cdp-team3/shipping-address-service/domain/models"
	gomock "github.com/golang/mock/gomock"
)

// MockShippingRepository is a mock of ShippingRepository interface.
type MockShippingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockShippingRepositoryMockRecorder
}

// MockShippingRepositoryMockRecorder is the mock recorder for MockShippingRepository.
type MockShippingRepositoryMockRecorder struct {
	mock *MockShippingRepository
}

// NewMockShippingRepository creates a new mock instance.
func NewMockShippingRepository(ctrl *gomock.Controller) *MockShippingRepository {
	mock := &MockShippingRepository{ctrl: ctrl}
	mock.recorder = &MockShippingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShippingRepository) EXPECT() *MockShippingRepositoryMockRecorder {
	return m.recorder
}

// DBHealthCheck mocks base method.
func (m *MockShippingRepository) DBHealthCheck() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBHealthCheck")
	ret0, _ := ret[0].(bool)
	return ret0
}

// DBHealthCheck indicates an expected call of DBHealthCheck.
func (mr *MockShippingRepositoryMockRecorder) DBHealthCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBHealthCheck", reflect.TypeOf((*MockShippingRepository)(nil).DBHealthCheck))
}

// DeleteShippingAddressByIdFromDB mocks base method.
func (m *MockShippingRepository) DeleteShippingAddressByIdFromDB(arg0 string) (bool, *app_erros.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShippingAddressByIdFromDB", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*app_erros.AppError)
	return ret0, ret1
}

// DeleteShippingAddressByIdFromDB indicates an expected call of DeleteShippingAddressByIdFromDB.
func (mr *MockShippingRepositoryMockRecorder) DeleteShippingAddressByIdFromDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShippingAddressByIdFromDB", reflect.TypeOf((*MockShippingRepository)(nil).DeleteShippingAddressByIdFromDB), arg0)
}

// FindShippingAddressByIdFromDB mocks base method.
func (m *MockShippingRepository) FindShippingAddressByIdFromDB(arg0 string) (*models.ShippingAddress, *app_erros.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindShippingAddressByIdFromDB", arg0)
	ret0, _ := ret[0].(*models.ShippingAddress)
	ret1, _ := ret[1].(*app_erros.AppError)
	return ret0, ret1
}

// FindShippingAddressByIdFromDB indicates an expected call of FindShippingAddressByIdFromDB.
func (mr *MockShippingRepositoryMockRecorder) FindShippingAddressByIdFromDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindShippingAddressByIdFromDB", reflect.TypeOf((*MockShippingRepository)(nil).FindShippingAddressByIdFromDB), arg0)
}

// GetDefaultShippingAddressOfUserByIdFromDB mocks base method.
func (m *MockShippingRepository) GetDefaultShippingAddressOfUserByIdFromDB(arg0 string) (*models.ShippingAddress, *app_erros.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultShippingAddressOfUserByIdFromDB", arg0)
	ret0, _ := ret[0].(*models.ShippingAddress)
	ret1, _ := ret[1].(*app_erros.AppError)
	return ret0, ret1
}

// GetDefaultShippingAddressOfUserByIdFromDB indicates an expected call of GetDefaultShippingAddressOfUserByIdFromDB.
func (mr *MockShippingRepositoryMockRecorder) GetDefaultShippingAddressOfUserByIdFromDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultShippingAddressOfUserByIdFromDB", reflect.TypeOf((*MockShippingRepository)(nil).GetDefaultShippingAddressOfUserByIdFromDB), arg0)
}

// HandleSetExistingShippingAddressToDefaultByIdToDB mocks base method.
func (m *MockShippingRepository) HandleSetExistingShippingAddressToDefaultByIdToDB(arg0 string) (bool, *app_erros.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleSetExistingShippingAddressToDefaultByIdToDB", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*app_erros.AppError)
	return ret0, ret1
}

// HandleSetExistingShippingAddressToDefaultByIdToDB indicates an expected call of HandleSetExistingShippingAddressToDefaultByIdToDB.
func (mr *MockShippingRepositoryMockRecorder) HandleSetExistingShippingAddressToDefaultByIdToDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSetExistingShippingAddressToDefaultByIdToDB", reflect.TypeOf((*MockShippingRepository)(nil).HandleSetExistingShippingAddressToDefaultByIdToDB), arg0)
}

// InsertShippingAddressToDB mocks base method.
func (m *MockShippingRepository) InsertShippingAddressToDB(arg0 *models.ShippingAddress) (string, *app_erros.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertShippingAddressToDB", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*app_erros.AppError)
	return ret0, ret1
}

// InsertShippingAddressToDB indicates an expected call of InsertShippingAddressToDB.
func (mr *MockShippingRepositoryMockRecorder) InsertShippingAddressToDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertShippingAddressToDB", reflect.TypeOf((*MockShippingRepository)(nil).InsertShippingAddressToDB), arg0)
}

// UpdateShippingAddressByIdFromDB mocks base method.
func (m *MockShippingRepository) UpdateShippingAddressByIdFromDB(arg0 string, arg1 *models.ShippingAddress) (bool, *app_erros.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShippingAddressByIdFromDB", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*app_erros.AppError)
	return ret0, ret1
}

// UpdateShippingAddressByIdFromDB indicates an expected call of UpdateShippingAddressByIdFromDB.
func (mr *MockShippingRepositoryMockRecorder) UpdateShippingAddressByIdFromDB(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShippingAddressByIdFromDB", reflect.TypeOf((*MockShippingRepository)(nil).UpdateShippingAddressByIdFromDB), arg0, arg1)
}
