// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cdp-team3/shipping-address-service/domain/services (interfaces: ShippingService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	app_erros "github.com/cdp-team3/shipping-address-service/app-errors"
	models "github.com/cdp-team3/shipping-address-service/domain/models"
	gomock "github.com/golang/mock/gomock"
)

// MockShippingService is a mock of ShippingService interface.
type MockShippingService struct {
	ctrl     *gomock.Controller
	recorder *MockShippingServiceMockRecorder
}

// MockShippingServiceMockRecorder is the mock recorder for MockShippingService.
type MockShippingServiceMockRecorder struct {
	mock *MockShippingService
}

// NewMockShippingService creates a new mock instance.
func NewMockShippingService(ctrl *gomock.Controller) *MockShippingService {
	mock := &MockShippingService{ctrl: ctrl}
	mock.recorder = &MockShippingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShippingService) EXPECT() *MockShippingServiceMockRecorder {
	return m.recorder
}

// DeleteShippingAddressById mocks base method.
func (m *MockShippingService) DeleteShippingAddressById(arg0 string) (bool, *app_erros.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShippingAddressById", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*app_erros.AppError)
	return ret0, ret1
}

// DeleteShippingAddressById indicates an expected call of DeleteShippingAddressById.
func (mr *MockShippingServiceMockRecorder) DeleteShippingAddressById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShippingAddressById", reflect.TypeOf((*MockShippingService)(nil).DeleteShippingAddressById), arg0)
}

// FindShippingAddressById mocks base method.
func (m *MockShippingService) FindShippingAddressById(arg0 string) (*models.ShippingAddress, *app_erros.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindShippingAddressById", arg0)
	ret0, _ := ret[0].(*models.ShippingAddress)
	ret1, _ := ret[1].(*app_erros.AppError)
	return ret0, ret1
}

// FindShippingAddressById indicates an expected call of FindShippingAddressById.
func (mr *MockShippingServiceMockRecorder) FindShippingAddressById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindShippingAddressById", reflect.TypeOf((*MockShippingService)(nil).FindShippingAddressById), arg0)
}

// GetDefaultShippingAddressOfUserById mocks base method.
func (m *MockShippingService) GetDefaultShippingAddressOfUserById(arg0 string) (*models.ShippingAddress, *app_erros.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultShippingAddressOfUserById", arg0)
	ret0, _ := ret[0].(*models.ShippingAddress)
	ret1, _ := ret[1].(*app_erros.AppError)
	return ret0, ret1
}

// GetDefaultShippingAddressOfUserById indicates an expected call of GetDefaultShippingAddressOfUserById.
func (mr *MockShippingServiceMockRecorder) GetDefaultShippingAddressOfUserById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultShippingAddressOfUserById", reflect.TypeOf((*MockShippingService)(nil).GetDefaultShippingAddressOfUserById), arg0)
}

// HandleSetExistingShippingAddressToDefaultById mocks base method.
func (m *MockShippingService) HandleSetExistingShippingAddressToDefaultById(arg0 string) (bool, *app_erros.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleSetExistingShippingAddressToDefaultById", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*app_erros.AppError)
	return ret0, ret1
}

// HandleSetExistingShippingAddressToDefaultById indicates an expected call of HandleSetExistingShippingAddressToDefaultById.
func (mr *MockShippingServiceMockRecorder) HandleSetExistingShippingAddressToDefaultById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSetExistingShippingAddressToDefaultById", reflect.TypeOf((*MockShippingService)(nil).HandleSetExistingShippingAddressToDefaultById), arg0)
}

// InsertShippingAddress mocks base method.
func (m *MockShippingService) InsertShippingAddress(arg0 *models.ShippingAddress) (string, *app_erros.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertShippingAddress", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*app_erros.AppError)
	return ret0, ret1
}

// InsertShippingAddress indicates an expected call of InsertShippingAddress.
func (mr *MockShippingServiceMockRecorder) InsertShippingAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertShippingAddress", reflect.TypeOf((*MockShippingService)(nil).InsertShippingAddress), arg0)
}

// UpdateShippingAddressById mocks base method.
func (m *MockShippingService) UpdateShippingAddressById(arg0 string, arg1 *models.ShippingAddress) (bool, *app_erros.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShippingAddressById", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*app_erros.AppError)
	return ret0, ret1
}

// UpdateShippingAddressById indicates an expected call of UpdateShippingAddressById.
func (mr *MockShippingServiceMockRecorder) UpdateShippingAddressById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShippingAddressById", reflect.TypeOf((*MockShippingService)(nil).UpdateShippingAddressById), arg0, arg1)
}
