// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "Health Check Endpoint",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health Check"
                ],
                "summary": "Health Check Endpoint",
                "responses": {
                    "200": {
                        "description": "Health Check Response.",
                        "schema": {
                            "$ref": "#/definitions/responses.HealthCheckResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPErrorDTO"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPErrorDTO"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/confirm": {
            "post": {
                "description": "Get an overview of the order from the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Checkout API"
                ],
                "summary": "Get an overview of the order",
                "responses": {
                    "200": {
                        "description": "Order Overview Data",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPErrorDTO"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPErrorDTO"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/confirm/success": {
            "post": {
                "description": "Webhook hit when Order is successful to clear Cart and Unset Session Data.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Checkout API"
                ],
                "summary": "Order Successful Webhook",
                "responses": {
                    "200": {
                        "description": "Cart Cleared message DTO.",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPErrorDTO"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.HTTPErrorDTO"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "errors.HTTPErrorDTO": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Error code",
                    "type": "integer",
                    "example": 400
                },
                "details": {
                    "description": "Detailed Error Messages",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "Invalid email."
                    ]
                },
                "message": {
                    "description": "Brief Error Message",
                    "type": "string",
                    "example": "Status bad request."
                }
            }
        },
        "responses.HealthCheckResponse": {
            "type": "object",
            "properties": {
                "db_health": {
                    "description": "DB Health",
                    "type": "string"
                },
                "kafka_server_health": {
                    "description": "Kafka Server Health",
                    "type": "string"
                },
                "service_health": {
                    "description": "Service Health",
                    "type": "string"
                }
            }
        },
        "responses.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Message being sent through the DTO",
                    "type": "string",
                    "example": "Sample Message"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
