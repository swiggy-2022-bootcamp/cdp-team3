// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: grpcs/cart_checkout/cart_checkout.proto

package cart_checkout

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CartCheckoutServiceClient is the client API for CartCheckoutService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartCheckoutServiceClient interface {
	// The Remote Procedure Call to clear the cart.
	EmptyCart(ctx context.Context, in *CartEmptySignal, opts ...grpc.CallOption) (*CartEmptyOutput, error)
}

type cartCheckoutServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCartCheckoutServiceClient(cc grpc.ClientConnInterface) CartCheckoutServiceClient {
	return &cartCheckoutServiceClient{cc}
}

func (c *cartCheckoutServiceClient) EmptyCart(ctx context.Context, in *CartEmptySignal, opts ...grpc.CallOption) (*CartEmptyOutput, error) {
	out := new(CartEmptyOutput)
	err := c.cc.Invoke(ctx, "/cart_checkout.CartCheckoutService/EmptyCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartCheckoutServiceServer is the server API for CartCheckoutService service.
// All implementations must embed UnimplementedCartCheckoutServiceServer
// for forward compatibility
type CartCheckoutServiceServer interface {
	// The Remote Procedure Call to clear the cart.
	EmptyCart(context.Context, *CartEmptySignal) (*CartEmptyOutput, error)
	mustEmbedUnimplementedCartCheckoutServiceServer()
}

// UnimplementedCartCheckoutServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCartCheckoutServiceServer struct {
}

func (UnimplementedCartCheckoutServiceServer) EmptyCart(context.Context, *CartEmptySignal) (*CartEmptyOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmptyCart not implemented")
}
func (UnimplementedCartCheckoutServiceServer) mustEmbedUnimplementedCartCheckoutServiceServer() {}

// UnsafeCartCheckoutServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartCheckoutServiceServer will
// result in compilation errors.
type UnsafeCartCheckoutServiceServer interface {
	mustEmbedUnimplementedCartCheckoutServiceServer()
}

func RegisterCartCheckoutServiceServer(s grpc.ServiceRegistrar, srv CartCheckoutServiceServer) {
	s.RegisterService(&CartCheckoutService_ServiceDesc, srv)
}

func _CartCheckoutService_EmptyCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartEmptySignal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartCheckoutServiceServer).EmptyCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart_checkout.CartCheckoutService/EmptyCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartCheckoutServiceServer).EmptyCart(ctx, req.(*CartEmptySignal))
	}
	return interceptor(ctx, in, info, handler)
}

// CartCheckoutService_ServiceDesc is the grpc.ServiceDesc for CartCheckoutService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CartCheckoutService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cart_checkout.CartCheckoutService",
	HandlerType: (*CartCheckoutServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EmptyCart",
			Handler:    _CartCheckoutService_EmptyCart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcs/cart_checkout/cart_checkout.proto",
}
