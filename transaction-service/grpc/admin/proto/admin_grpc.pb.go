// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/admin.proto

package admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransactionAmountClient is the client API for TransactionAmount service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionAmountClient interface {
	SendTransactionAmount(ctx context.Context, in *TransactionDetails, opts ...grpc.CallOption) (*SuccessMessage, error)
}

type transactionAmountClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionAmountClient(cc grpc.ClientConnInterface) TransactionAmountClient {
	return &transactionAmountClient{cc}
}

func (c *transactionAmountClient) SendTransactionAmount(ctx context.Context, in *TransactionDetails, opts ...grpc.CallOption) (*SuccessMessage, error) {
	out := new(SuccessMessage)
	err := c.cc.Invoke(ctx, "/admin.TransactionAmount/SendTransactionAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionAmountServer is the server API for TransactionAmount service.
// All implementations must embed UnimplementedTransactionAmountServer
// for forward compatibility
type TransactionAmountServer interface {
	SendTransactionAmount(context.Context, *TransactionDetails) (*SuccessMessage, error)
	mustEmbedUnimplementedTransactionAmountServer()
}

// UnimplementedTransactionAmountServer must be embedded to have forward compatible implementations.
type UnimplementedTransactionAmountServer struct {
}

func (UnimplementedTransactionAmountServer) SendTransactionAmount(context.Context, *TransactionDetails) (*SuccessMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransactionAmount not implemented")
}
func (UnimplementedTransactionAmountServer) mustEmbedUnimplementedTransactionAmountServer() {}

// UnsafeTransactionAmountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionAmountServer will
// result in compilation errors.
type UnsafeTransactionAmountServer interface {
	mustEmbedUnimplementedTransactionAmountServer()
}

func RegisterTransactionAmountServer(s grpc.ServiceRegistrar, srv TransactionAmountServer) {
	s.RegisterService(&TransactionAmount_ServiceDesc, srv)
}

func _TransactionAmount_SendTransactionAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionAmountServer).SendTransactionAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.TransactionAmount/SendTransactionAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionAmountServer).SendTransactionAmount(ctx, req.(*TransactionDetails))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionAmount_ServiceDesc is the grpc.ServiceDesc for TransactionAmount service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionAmount_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.TransactionAmount",
	HandlerType: (*TransactionAmountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTransactionAmount",
			Handler:    _TransactionAmount_SendTransactionAmount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/admin.proto",
}
