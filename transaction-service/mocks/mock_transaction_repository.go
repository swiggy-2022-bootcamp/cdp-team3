// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/swiggy-2022-bootcamp/cdp-team3/transaction-service/domain/repository (interfaces: TransactionRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	errors "github.com/swiggy-2022-bootcamp/cdp-team3/transaction-service/errors"
	models "github.com/swiggy-2022-bootcamp/cdp-team3/transaction-service/models"
)

// MockTransactionRepository is a mock of TransactionRepository interface.
type MockTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepositoryMockRecorder
}

// MockTransactionRepositoryMockRecorder is the mock recorder for MockTransactionRepository.
type MockTransactionRepositoryMockRecorder struct {
	mock *MockTransactionRepository
}

// NewMockTransactionRepository creates a new mock instance.
func NewMockTransactionRepository(ctrl *gomock.Controller) *MockTransactionRepository {
	mock := &MockTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepository) EXPECT() *MockTransactionRepositoryMockRecorder {
	return m.recorder
}

// AddTransactionAmtToCustomerInDB mocks base method.
func (m *MockTransactionRepository) AddTransactionAmtToCustomerInDB(arg0 *models.Transaction) (*models.Transaction, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTransactionAmtToCustomerInDB", arg0)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// AddTransactionAmtToCustomerInDB indicates an expected call of AddTransactionAmtToCustomerInDB.
func (mr *MockTransactionRepositoryMockRecorder) AddTransactionAmtToCustomerInDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTransactionAmtToCustomerInDB", reflect.TypeOf((*MockTransactionRepository)(nil).AddTransactionAmtToCustomerInDB), arg0)
}

// GetTransactionByCustomerIdInDB mocks base method.
func (m *MockTransactionRepository) GetTransactionByCustomerIdInDB(arg0 string) ([]models.Transaction, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByCustomerIdInDB", arg0)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GetTransactionByCustomerIdInDB indicates an expected call of GetTransactionByCustomerIdInDB.
func (mr *MockTransactionRepositoryMockRecorder) GetTransactionByCustomerIdInDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByCustomerIdInDB", reflect.TypeOf((*MockTransactionRepository)(nil).GetTransactionByCustomerIdInDB), arg0)
}
