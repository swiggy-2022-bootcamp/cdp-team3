// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/swiggy-2022-bootcamp/cdp-team3/orders-service/domain/repository (interfaces: OrderRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	errors "github.com/swiggy-2022-bootcamp/cdp-team3/orders-service/errors"
	models "github.com/swiggy-2022-bootcamp/cdp-team3/orders-service/models"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// DeleteOrderByIdInDB mocks base method.
func (m *MockOrderRepository) DeleteOrderByIdInDB(arg0 string) (*models.Order, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderByIdInDB", arg0)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// DeleteOrderByIdInDB indicates an expected call of DeleteOrderByIdInDB.
func (mr *MockOrderRepositoryMockRecorder) DeleteOrderByIdInDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderByIdInDB", reflect.TypeOf((*MockOrderRepository)(nil).DeleteOrderByIdInDB), arg0)
}

// GenerateInvoiceByIdInDB mocks base method.
func (m *MockOrderRepository) GenerateInvoiceByIdInDB(arg0 string) (*models.Order, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateInvoiceByIdInDB", arg0)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GenerateInvoiceByIdInDB indicates an expected call of GenerateInvoiceByIdInDB.
func (mr *MockOrderRepositoryMockRecorder) GenerateInvoiceByIdInDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateInvoiceByIdInDB", reflect.TypeOf((*MockOrderRepository)(nil).GenerateInvoiceByIdInDB), arg0)
}

// GetAllOrdersFromDB mocks base method.
func (m *MockOrderRepository) GetAllOrdersFromDB() ([]models.Order, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrdersFromDB")
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GetAllOrdersFromDB indicates an expected call of GetAllOrdersFromDB.
func (mr *MockOrderRepositoryMockRecorder) GetAllOrdersFromDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrdersFromDB", reflect.TypeOf((*MockOrderRepository)(nil).GetAllOrdersFromDB))
}

// GetOrderByIdFromDB mocks base method.
func (m *MockOrderRepository) GetOrderByIdFromDB(arg0 string) (*models.Order, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByIdFromDB", arg0)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GetOrderByIdFromDB indicates an expected call of GetOrderByIdFromDB.
func (mr *MockOrderRepositoryMockRecorder) GetOrderByIdFromDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByIdFromDB", reflect.TypeOf((*MockOrderRepository)(nil).GetOrderByIdFromDB), arg0)
}

// GetOrdersByCustomerIdFromDB mocks base method.
func (m *MockOrderRepository) GetOrdersByCustomerIdFromDB(arg0 string) ([]models.Order, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByCustomerIdFromDB", arg0)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GetOrdersByCustomerIdFromDB indicates an expected call of GetOrdersByCustomerIdFromDB.
func (mr *MockOrderRepositoryMockRecorder) GetOrdersByCustomerIdFromDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByCustomerIdFromDB", reflect.TypeOf((*MockOrderRepository)(nil).GetOrdersByCustomerIdFromDB), arg0)
}

// GetOrdersByStatusFromDB mocks base method.
func (m *MockOrderRepository) GetOrdersByStatusFromDB(arg0 string) ([]models.Order, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByStatusFromDB", arg0)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GetOrdersByStatusFromDB indicates an expected call of GetOrdersByStatusFromDB.
func (mr *MockOrderRepositoryMockRecorder) GetOrdersByStatusFromDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByStatusFromDB", reflect.TypeOf((*MockOrderRepository)(nil).GetOrdersByStatusFromDB), arg0)
}

// UpdateStatusByIdInDB mocks base method.
func (m *MockOrderRepository) UpdateStatusByIdInDB(arg0, arg1 string) (*models.Order, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusByIdInDB", arg0, arg1)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// UpdateStatusByIdInDB indicates an expected call of UpdateStatusByIdInDB.
func (mr *MockOrderRepositoryMockRecorder) UpdateStatusByIdInDB(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusByIdInDB", reflect.TypeOf((*MockOrderRepository)(nil).UpdateStatusByIdInDB), arg0, arg1)
}
