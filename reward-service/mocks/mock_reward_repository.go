// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/swiggy-2022-bootcamp/cdp-team3/rewards-service/domain/repository (interfaces: RewardRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	errors "github.com/swiggy-2022-bootcamp/cdp-team3/rewards-service/errors"
	models "github.com/swiggy-2022-bootcamp/cdp-team3/rewards-service/models"
)

// MockRewardRepository is a mock of RewardRepository interface.
type MockRewardRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRewardRepositoryMockRecorder
}

// MockRewardRepositoryMockRecorder is the mock recorder for MockRewardRepository.
type MockRewardRepositoryMockRecorder struct {
	mock *MockRewardRepository
}

// NewMockRewardRepository creates a new mock instance.
func NewMockRewardRepository(ctrl *gomock.Controller) *MockRewardRepository {
	mock := &MockRewardRepository{ctrl: ctrl}
	mock.recorder = &MockRewardRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRewardRepository) EXPECT() *MockRewardRepositoryMockRecorder {
	return m.recorder
}

// AddRewardToDB mocks base method.
func (m *MockRewardRepository) AddRewardToDB(arg0 *models.Reward) *errors.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRewardToDB", arg0)
	ret0, _ := ret[0].(*errors.AppError)
	return ret0
}

// AddRewardToDB indicates an expected call of AddRewardToDB.
func (mr *MockRewardRepositoryMockRecorder) AddRewardToDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRewardToDB", reflect.TypeOf((*MockRewardRepository)(nil).AddRewardToDB), arg0)
}

// GetAllRewardsFromDB mocks base method.
func (m *MockRewardRepository) GetAllRewardsFromDB() ([]models.Reward, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRewardsFromDB")
	ret0, _ := ret[0].([]models.Reward)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GetAllRewardsFromDB indicates an expected call of GetAllRewardsFromDB.
func (mr *MockRewardRepositoryMockRecorder) GetAllRewardsFromDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRewardsFromDB", reflect.TypeOf((*MockRewardRepository)(nil).GetAllRewardsFromDB))
}

// GetRewardByIdFromDB mocks base method.
func (m *MockRewardRepository) GetRewardByIdFromDB(arg0 string) (*models.Reward, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRewardByIdFromDB", arg0)
	ret0, _ := ret[0].(*models.Reward)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GetRewardByIdFromDB indicates an expected call of GetRewardByIdFromDB.
func (mr *MockRewardRepositoryMockRecorder) GetRewardByIdFromDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRewardByIdFromDB", reflect.TypeOf((*MockRewardRepository)(nil).GetRewardByIdFromDB), arg0)
}

// GetRewardsByCustomerIdFromDB mocks base method.
func (m *MockRewardRepository) GetRewardsByCustomerIdFromDB(arg0 string) ([]models.Reward, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRewardsByCustomerIdFromDB", arg0)
	ret0, _ := ret[0].([]models.Reward)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GetRewardsByCustomerIdFromDB indicates an expected call of GetRewardsByCustomerIdFromDB.
func (mr *MockRewardRepositoryMockRecorder) GetRewardsByCustomerIdFromDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRewardsByCustomerIdFromDB", reflect.TypeOf((*MockRewardRepository)(nil).GetRewardsByCustomerIdFromDB), arg0)
}
