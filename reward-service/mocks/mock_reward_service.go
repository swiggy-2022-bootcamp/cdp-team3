// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/swiggy-2022-bootcamp/cdp-team3/rewards-service/domain/services (interfaces: RewardService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	errors "github.com/swiggy-2022-bootcamp/cdp-team3/rewards-service/errors"
	models "github.com/swiggy-2022-bootcamp/cdp-team3/rewards-service/models"
)

// MockRewardService is a mock of RewardService interface.
type MockRewardService struct {
	ctrl     *gomock.Controller
	recorder *MockRewardServiceMockRecorder
}

// MockRewardServiceMockRecorder is the mock recorder for MockRewardService.
type MockRewardServiceMockRecorder struct {
	mock *MockRewardService
}

// NewMockRewardService creates a new mock instance.
func NewMockRewardService(ctrl *gomock.Controller) *MockRewardService {
	mock := &MockRewardService{ctrl: ctrl}
	mock.recorder = &MockRewardServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRewardService) EXPECT() *MockRewardServiceMockRecorder {
	return m.recorder
}

// AddReward mocks base method.
func (m *MockRewardService) AddReward(arg0 *models.Reward) *errors.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReward", arg0)
	ret0, _ := ret[0].(*errors.AppError)
	return ret0
}

// AddReward indicates an expected call of AddReward.
func (mr *MockRewardServiceMockRecorder) AddReward(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReward", reflect.TypeOf((*MockRewardService)(nil).AddReward), arg0)
}

// GetAllRewards mocks base method.
func (m *MockRewardService) GetAllRewards() ([]models.Reward, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRewards")
	ret0, _ := ret[0].([]models.Reward)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GetAllRewards indicates an expected call of GetAllRewards.
func (mr *MockRewardServiceMockRecorder) GetAllRewards() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRewards", reflect.TypeOf((*MockRewardService)(nil).GetAllRewards))
}

// GetRewardById mocks base method.
func (m *MockRewardService) GetRewardById(arg0 string) (*models.Reward, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRewardById", arg0)
	ret0, _ := ret[0].(*models.Reward)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GetRewardById indicates an expected call of GetRewardById.
func (mr *MockRewardServiceMockRecorder) GetRewardById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRewardById", reflect.TypeOf((*MockRewardService)(nil).GetRewardById), arg0)
}

// GetRewardsByCustomerId mocks base method.
func (m *MockRewardService) GetRewardsByCustomerId(arg0 string) ([]models.Reward, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRewardsByCustomerId", arg0)
	ret0, _ := ret[0].([]models.Reward)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GetRewardsByCustomerId indicates an expected call of GetRewardsByCustomerId.
func (mr *MockRewardServiceMockRecorder) GetRewardsByCustomerId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRewardsByCustomerId", reflect.TypeOf((*MockRewardService)(nil).GetRewardsByCustomerId), arg0)
}
