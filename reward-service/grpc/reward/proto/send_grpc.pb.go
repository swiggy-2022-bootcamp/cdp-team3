// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: send.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RewardPointsClient is the client API for RewardPoints service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RewardPointsClient interface {
	SendRewardPoints(ctx context.Context, in *RewardDetails, opts ...grpc.CallOption) (*SuccessMessage, error)
}

type rewardPointsClient struct {
	cc grpc.ClientConnInterface
}

func NewRewardPointsClient(cc grpc.ClientConnInterface) RewardPointsClient {
	return &rewardPointsClient{cc}
}

func (c *rewardPointsClient) SendRewardPoints(ctx context.Context, in *RewardDetails, opts ...grpc.CallOption) (*SuccessMessage, error) {
	out := new(SuccessMessage)
	err := c.cc.Invoke(ctx, "/protos.RewardPoints/SendRewardPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RewardPointsServer is the server API for RewardPoints service.
// All implementations must embed UnimplementedRewardPointsServer
// for forward compatibility
type RewardPointsServer interface {
	SendRewardPoints(context.Context, *RewardDetails) (*SuccessMessage, error)
	mustEmbedUnimplementedRewardPointsServer()
}

// UnimplementedRewardPointsServer must be embedded to have forward compatible implementations.
type UnimplementedRewardPointsServer struct {
}

func (UnimplementedRewardPointsServer) SendRewardPoints(context.Context, *RewardDetails) (*SuccessMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRewardPoints not implemented")
}
func (UnimplementedRewardPointsServer) mustEmbedUnimplementedRewardPointsServer() {}

// UnsafeRewardPointsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RewardPointsServer will
// result in compilation errors.
type UnsafeRewardPointsServer interface {
	mustEmbedUnimplementedRewardPointsServer()
}

func RegisterRewardPointsServer(s grpc.ServiceRegistrar, srv RewardPointsServer) {
	s.RegisterService(&RewardPoints_ServiceDesc, srv)
}

func _RewardPoints_SendRewardPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardPointsServer).SendRewardPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.RewardPoints/SendRewardPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardPointsServer).SendRewardPoints(ctx, req.(*RewardDetails))
	}
	return interceptor(ctx, in, info, handler)
}

// RewardPoints_ServiceDesc is the grpc.ServiceDesc for RewardPoints service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RewardPoints_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.RewardPoints",
	HandlerType: (*RewardPointsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendRewardPoints",
			Handler:    _RewardPoints_SendRewardPoints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "send.proto",
}
